'use strict';

var crypto = require('crypto');
var CryptoJS = require('crypto-js');
var CryptoLib = function CryptoLib() {};
module.exports = CryptoLib;

CryptoLib.SHA3 = function SHA3(plainText) {
    return CryptoJS.SHA3(plainText, { outputLength: 512 }).toString(CryptoJS.enc.Hex);
};

/**
 * Encrypt to string by method "aes-256-ctr"
 * @param {*} text 
 * @return string
 */
CryptoLib.encrypt = function (text, secret_key) {
    var cipher = crypto.createCipher(config.server.encrypt.algorithm, secret_key);
    var crypted = cipher.update(text, 'utf8', 'hex');
    crypted += cipher.final('hex');
    return crypted;
};

/**
 * Decypt to from encrypt from method "aes-256-ctr"
 * @param {*} ciph 
 * return string
 */
CryptoLib.decrypt = function (ciph, secret_key) {
    var decipher = crypto.createDecipher(config.server.encrypt.algorithm, secret_key);
    var dec = decipher.update(ciph, 'hex', 'utf8');
    dec += decipher.final('utf8');
    return dec;
};

CryptoLib.encryptBySecretKey = function (text, secret_key) {
    var cipher = crypto.createCipher(config.server.encrypt.algorithm);
    var crypted = cipher.update(text, 'utf8', 'hex');
    crypted += cipher.final('hex');
    return crypted;
};

CryptoLib.decryptBySecretKey = function (ciph, secret_key) {
    var decipher = crypto.createDecipher(config.server.encrypt.algorithm);
    var dec = decipher.update(ciph, 'hex', 'utf8');
    dec += decipher.final('utf8');
    return dec;
};
/**
 * encrypt text to base64
 * @param plaintext 
 * @return string
 */
CryptoLib.base64Encrypt = function (plaintext) {
    var base64Txt = Buffer.from(plaintext).toString('base64');
    return base64Txt;
};
/**
 * decrypt to plain text from base64
 * @param {*} ciph 
 * @return string
 */
CryptoLib.base64Decrypt = function (ciph) {
    var txt = Buffer.from(ciph, 'base64').toString('utf-8');
    return txt;
};
/**
 * Encrypt plain string to md5 string
 * @param {*} str 
 * @return string
 */
CryptoLib.md5 = function md5(str) {
    var md5 = crypto.createHash("md5");
    md5.update(str);
    var str = md5.digest('hex');
    return str.toUpperCase(); //32 ký tự viết hoa  
};

/**
 * AES Encrypt plain string to AES string
 * @param {*} str 
 * @return string
 */
CryptoLib.AESEncrypt = function AESEncrypt(str, secretKey) {
    var string = CryptoJS.AES.encrypt(str, secretKey).toString();
    return string;
};

/**
 * AES Decrypt plain string to AES string
 * @param {*} str 
 * @return string
 */
CryptoLib.AESDecrypt = function AESDecrypt(str, secretKey) {
    var bytes = CryptoJS.AES.decrypt(str.toString(), secretKey);
    var plaintext = bytes.toString(CryptoJS.enc.Utf8);
    return plaintext;
};

// var md5 = md5('hello world','test');
// console.log(md5);
// var hw = encrypt("hello world")
// console.log(hw);
// // outputs hello world
// console.log(decrypt(hw));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9DcnlwdG8uanMiXSwibmFtZXMiOlsiY3J5cHRvIiwicmVxdWlyZSIsIkNyeXB0b0pTIiwiQ3J5cHRvTGliIiwibW9kdWxlIiwiZXhwb3J0cyIsIlNIQTMiLCJwbGFpblRleHQiLCJvdXRwdXRMZW5ndGgiLCJ0b1N0cmluZyIsImVuYyIsIkhleCIsImVuY3J5cHQiLCJ0ZXh0Iiwic2VjcmV0X2tleSIsImNpcGhlciIsImNyZWF0ZUNpcGhlciIsImNvbmZpZyIsInNlcnZlciIsImFsZ29yaXRobSIsImNyeXB0ZWQiLCJ1cGRhdGUiLCJmaW5hbCIsImRlY3J5cHQiLCJjaXBoIiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlciIsImRlYyIsImVuY3J5cHRCeVNlY3JldEtleSIsImRlY3J5cHRCeVNlY3JldEtleSIsImJhc2U2NEVuY3J5cHQiLCJwbGFpbnRleHQiLCJiYXNlNjRUeHQiLCJCdWZmZXIiLCJmcm9tIiwiYmFzZTY0RGVjcnlwdCIsInR4dCIsIm1kNSIsInN0ciIsImNyZWF0ZUhhc2giLCJkaWdlc3QiLCJ0b1VwcGVyQ2FzZSIsIkFFU0VuY3J5cHQiLCJzZWNyZXRLZXkiLCJzdHJpbmciLCJBRVMiLCJBRVNEZWNyeXB0IiwiYnl0ZXMiLCJVdGY4Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFNBQVNDLFFBQVEsUUFBUixDQUFiO0FBQ0EsSUFBSUMsV0FBV0QsUUFBUSxXQUFSLENBQWY7QUFDQSxJQUFJRSxZQUFZLFNBQVpBLFNBQVksR0FBVSxDQUFFLENBQTVCO0FBQ0FDLE9BQU9DLE9BQVAsR0FBaUJGLFNBQWpCOztBQUVBQSxVQUFVRyxJQUFWLEdBQWlCLFNBQVNBLElBQVQsQ0FBY0MsU0FBZCxFQUF5QjtBQUN0QyxXQUFPTCxTQUFTSSxJQUFULENBQWNDLFNBQWQsRUFBeUIsRUFBRUMsY0FBYyxHQUFoQixFQUF6QixFQUFnREMsUUFBaEQsQ0FBeURQLFNBQVNRLEdBQVQsQ0FBYUMsR0FBdEUsQ0FBUDtBQUNILENB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QyxRQUFyQyxFQUFiO0FBQ0EsV0FBT21DLE1BQVA7QUFDSCxDQUhEOztBQU1BOzs7OztBQUtBekMsVUFBVTJDLFVBQVYsR0FBdUIsU0FBU0EsVUFBVCxDQUFvQlIsR0FBcEIsRUFBeUJLLFNBQXpCLEVBQW9DO0FBQ3ZELFFBQUlJLFFBQVE3QyxTQUFTMkMsR0FBVCxDQUFhdEIsT0FBYixDQUFxQmUsSUFBSTdCLFFBQUosRUFBckIsRUFBcUNrQyxTQUFyQyxDQUFaO0FBQ0EsUUFBSVosWUFBWWdCLE1BQU10QyxRQUFOLENBQWVQLFNBQVNRLEdBQVQsQ0FBYXNDLElBQTVCLENBQWhCO0FBQ0EsV0FBT2pCLFNBQVA7QUFDSCxDQUpEOztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJDcnlwdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgQ3J5cHRvSlMgPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcbnZhciBDcnlwdG9MaWIgPSBmdW5jdGlvbigpe307XG5tb2R1bGUuZXhwb3J0cyA9IENyeXB0b0xpYjtcblxuQ3J5cHRvTGliLlNIQTMgPSBmdW5jdGlvbiBTSEEzKHBsYWluVGV4dCkge1xuICAgIHJldHVybiBDcnlwdG9KUy5TSEEzKHBsYWluVGV4dCwgeyBvdXRwdXRMZW5ndGg6IDUxMiB9KS50b1N0cmluZyhDcnlwdG9KUy5lbmMuSGV4KTtcbn1cblxuLyoqXG4gKiBFbmNyeXB0IHRvIHN0cmluZyBieSBtZXRob2QgXCJhZXMtMjU2LWN0clwiXG4gKiBAcGFyYW0geyp9IHRleHQgXG4gKiBAcmV0dXJuIHN0cmluZ1xuICovXG5DcnlwdG9MaWIuZW5jcnlwdCA9IGZ1bmN0aW9uKHRleHQsIHNlY3JldF9rZXkpe1xuICAgIHZhciBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyKGNvbmZpZy5zZXJ2ZXIuZW5jcnlwdC5hbGdvcml0aG0sIHNlY3JldF9rZXkpO1xuICAgIHZhciBjcnlwdGVkID0gY2lwaGVyLnVwZGF0ZSh0ZXh0LCd1dGY4JywnaGV4JylcbiAgICBjcnlwdGVkICs9IGNpcGhlci5maW5hbCgnaGV4Jyk7XG4gICAgcmV0dXJuIGNyeXB0ZWQ7XG59XG5cbi8qKlxuICogRGVjeXB0IHRvIGZyb20gZW5jcnlwdCBmcm9tIG1ldGhvZCBcImFlcy0yNTYtY3RyXCJcbiAqIEBwYXJhbSB7Kn0gY2lwaCBcbiAqIHJldHVybiBzdHJpbmdcbiAqL1xuIENyeXB0b0xpYi5kZWNyeXB0ID0gZnVuY3Rpb24oY2lwaCwgc2VjcmV0X2tleSl7XG4gICAgdmFyIGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyKGNvbmZpZy5zZXJ2ZXIuZW5jcnlwdC5hbGdvcml0aG0sIHNlY3JldF9rZXkpO1xuICAgIHZhciBkZWMgPSBkZWNpcGhlci51cGRhdGUoY2lwaCwnaGV4JywndXRmOCcpXG4gICAgZGVjICs9IGRlY2lwaGVyLmZpbmFsKCd1dGY4Jyk7XG4gICAgcmV0dXJuIGRlYztcbn1cblxuXG5cblxuXG5cblxuXG5cbkNyeXB0b0xpYi5lbmNyeXB0QnlTZWNyZXRLZXkgPSBmdW5jdGlvbih0ZXh0LHNlY3JldF9rZXkpe1xuICAgIHZhciBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyKGNvbmZpZy5zZXJ2ZXIuZW5jcnlwdC5hbGdvcml0aG0pO1xuICAgIHZhciBjcnlwdGVkID0gY2lwaGVyLnVwZGF0ZSh0ZXh0LCd1dGY4JywnaGV4JylcbiAgICBjcnlwdGVkICs9IGNpcGhlci5maW5hbCgnaGV4Jyk7XG4gICAgcmV0dXJuIGNyeXB0ZWQ7XG59XG5cblxuXG5DcnlwdG9MaWIuZGVjcnlwdEJ5U2VjcmV0S2V5ID0gZnVuY3Rpb24oY2lwaCxzZWNyZXRfa2V5KXtcbiAgICB2YXIgZGVjaXBoZXIgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXIoY29uZmlnLnNlcnZlci5lbmNyeXB0LmFsZ29yaXRobSk7XG4gICAgdmFyIGRlYyA9IGRlY2lwaGVyLnVwZGF0ZShjaXBoLCdoZXgnLCd1dGY4JylcbiAgICBkZWMgKz0gZGVjaXBoZXIuZmluYWwoJ3V0ZjgnKTtcbiAgICByZXR1cm4gZGVjO1xufVxuLyoqXG4gKiBlbmNyeXB0IHRleHQgdG8gYmFzZTY0XG4gKiBAcGFyYW0gcGxhaW50ZXh0IFxuICogQHJldHVybiBzdHJpbmdcbiAqL1xuQ3J5cHRvTGliLmJhc2U2NEVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpe1xuICAgIHZhciBiYXNlNjRUeHQgPSBCdWZmZXIuZnJvbShwbGFpbnRleHQpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICByZXR1cm4gYmFzZTY0VHh0O1xufVxuLyoqXG4gKiBkZWNyeXB0IHRvIHBsYWluIHRleHQgZnJvbSBiYXNlNjRcbiAqIEBwYXJhbSB7Kn0gY2lwaCBcbiAqIEByZXR1cm4gc3RyaW5nXG4gKi9cbkNyeXB0b0xpYi5iYXNlNjREZWNyeXB0ID0gZnVuY3Rpb24oY2lwaCl7XG4gICAgdmFyIHR4dCA9IEJ1ZmZlci5mcm9tKGNpcGgsICdiYXNlNjQnKS50b1N0cmluZygndXRmLTgnKTtcbiAgICByZXR1cm4gdHh0O1xufVxuLyoqXG4gKiBFbmNyeXB0IHBsYWluIHN0cmluZyB0byBtZDUgc3RyaW5nXG4gKiBAcGFyYW0geyp9IHN0ciBcbiAqIEByZXR1cm4gc3RyaW5nXG4gKi9cbkNyeXB0b0xpYi5tZDUgPSBmdW5jdGlvbiBtZDUoc3RyKXtcbiAgICB2YXIgbWQ1PWNyeXB0by5jcmVhdGVIYXNoKFwibWQ1XCIpOyAgXG4gICAgbWQ1LnVwZGF0ZShzdHIpOyAgXG4gICAgdmFyIHN0cj1tZDUuZGlnZXN0KCdoZXgnKTsgIFxuICAgIHJldHVybiBzdHIudG9VcHBlckNhc2UoKTsgIC8vMzIga8O9IHThu7Egdmnhur90IGhvYSAgXG59XG5cbi8qKlxuICogQUVTIEVuY3J5cHQgcGxhaW4gc3RyaW5nIHRvIEFFUyBzdHJpbmdcbiAqIEBwYXJhbSB7Kn0gc3RyIFxuICogQHJldHVybiBzdHJpbmdcbiAqL1xuQ3J5cHRvTGliLkFFU0VuY3J5cHQgPSBmdW5jdGlvbiBBRVNFbmNyeXB0KHN0ciwgc2VjcmV0S2V5ICl7XG4gICAgdmFyIHN0cmluZyA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KHN0ciwgc2VjcmV0S2V5KS50b1N0cmluZygpO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG5cblxuLyoqXG4gKiBBRVMgRGVjcnlwdCBwbGFpbiBzdHJpbmcgdG8gQUVTIHN0cmluZ1xuICogQHBhcmFtIHsqfSBzdHIgXG4gKiBAcmV0dXJuIHN0cmluZ1xuICovXG5DcnlwdG9MaWIuQUVTRGVjcnlwdCA9IGZ1bmN0aW9uIEFFU0RlY3J5cHQoc3RyLCBzZWNyZXRLZXkgKXtcbiAgICB2YXIgYnl0ZXMgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdChzdHIudG9TdHJpbmcoKSwgc2VjcmV0S2V5KTtcbiAgICB2YXIgcGxhaW50ZXh0ID0gYnl0ZXMudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xuICAgIHJldHVybiBwbGFpbnRleHQ7XG59XG5cblxuLy8gdmFyIG1kNSA9IG1kNSgnaGVsbG8gd29ybGQnLCd0ZXN0Jyk7XG4vLyBjb25zb2xlLmxvZyhtZDUpO1xuLy8gdmFyIGh3ID0gZW5jcnlwdChcImhlbGxvIHdvcmxkXCIpXG4vLyBjb25zb2xlLmxvZyhodyk7XG4vLyAvLyBvdXRwdXRzIGhlbGxvIHdvcmxkXG4vLyBjb25zb2xlLmxvZyhkZWNyeXB0KGh3KSk7Il19