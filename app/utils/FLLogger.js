'use strict';

var fs = require('fs');
var log4js = require('log4js');
var FLLogger = function FLLogger(logFileName) {
	//ini log4js
	log4js.configure({
		appenders: {
			everything: {
				type: 'multiFile', base: 'logs/', property: 'ext', extension: '.log',
				maxLogSize: 10485760, backups: 3000, compress: true
			}
		},
		categories: {
			default: { appenders: ['everything'], level: 'info' }
		}
	});
	this.logger = log4js.getLogger(logFileName);
	this.logger.addContext('ext', logFileName);
};
module.exports = FLLogger;

FLLogger.getLogger = function (fileLogName) {
	return new FLLogger(fileLogName);
};
/**
 * write error log
 * @param err
 */
FLLogger.prototype.error = function () {
	try {
		this.logger.error(arguments);
		if (config.server.env == "development") {
			console.log(arguments);
		}
	} catch (error) {
		console.error(error);
	}
};
/**
 * write info log
 * @param info
 */
FLLogger.prototype.info = function () {
	try {
		this.logger.info.apply(this.logger, arguments);
		if (config.server.env == "development") {
			console.log(arguments);
		}
	} catch (error) {
		console.error(error);
	}
};
/**
 * write debug log
 * @param debug
 */
FLLogger.prototype.debug = function () {
	try {
		if (config.server.env == "development") {
			console.log(arguments);
			this.logger.debug(arguments);
		}
	} catch (error) {
		console.error(error);
	}
};
/**
 * write warn log
 * @param warn
 */
FLLogger.prototype.warn = function () {
	try {

		if (config.server.env == "development") {
			console.log(arguments);
			this.logger.warn(arguments);
		}
	} catch (error) {
		console.error(error);
	}
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9GTExvZ2dlci5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJsb2c0anMiLCJGTExvZ2dlciIsImxvZ0ZpbGVOYW1lIiwiY29uZmlndXJlIiwiYXBwZW5kZXJzIiwiZXZlcnl0aGluZyIsInR5cGUiLCJiYXNlIiwicHJvcGVydHkiLCJleHRlbnNpb24iLCJtYXhMb2dTaXplIiwiYmFja3VwcyIsImNvbXByZXNzIiwiY2F0ZWdvcmllcyIsImRlZmF1bHQiLCJsZXZlbCIsImxvZ2dlciIsImdldExvZ2dlciIsImFkZENvbnRleHQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmlsZUxvZ05hbWUiLCJwcm90b3R5cGUiLCJlcnJvciIsImFyZ3VtZW50cyIsImNvbmZpZyIsInNlcnZlciIsImVudiIsImNvbnNvbGUiLCJsb2ciLCJpbmZvIiwiYXBwbHkiLCJkZWJ1ZyIsIndhcm4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsS0FBS0MsUUFBUSxJQUFSLENBQVQ7QUFDQSxJQUFJQyxTQUFTRCxRQUFRLFFBQVIsQ0FBYjtBQUNBLElBQUlFLFdBQVcsU0FBWEEsUUFBVyxDQUFVQyxXQUFWLEVBQXVCO0FBQ3JDO0FBQ0FGLFFBQU9HLFNBQVAsQ0FBaUI7QUFDZEMsYUFBVztBQUNUQyxlQUFZO0FBQ1ZDLFVBQU0sV0FESSxFQUNTQyxNQUFNLE9BRGYsRUFDd0JDLFVBQVUsS0FEbEMsRUFDeUNDLFdBQVcsTUFEcEQ7QUFFVkMsZ0JBQVksUUFGRixFQUVZQyxTQUFTLElBRnJCLEVBRTJCQyxVQUFVO0FBRnJDO0FBREgsR0FERztBQU9kQyxjQUFZO0FBQ1ZDLFlBQVMsRUFBRVYsV0FBVyxDQUFFLFlBQUYsQ0FBYixFQUErQlcsT0FBTyxNQUF0QztBQURDO0FBUEUsRUFBakI7QUFXQSxNQUFLQyxNQUFMLEdBQWNoQixPQUFPaUIsU0FBUCxDQUFpQmYsV0FBakIsQ0FBZDtBQUNBLE1BQUtjLE1BQUwsQ0FBWUUsVUFBWixDQUF1QixLQUF2QixFQUE4QmhCLFdBQTlCO0FBQ0EsQ0FmRDtBQWdCQWlCLE9BQU9DLE9BQVAsR0FBaUJuQixRQUFqQjs7QUFFQUEsU0FBU2dCLFNBQVQsR0FBbUIsVUFBU0ksV0FBVCxFQUFxQjtBQUN2QyxRQUFPLElBQUlwQixRQUFKLENBQWFvQixXQUFiLENBQVA7QUFDQSxDQUZEO0FBR0E7Ozs7QUFJQXBCLFNBQVNxQixTQUFULENBQW1CQyxLQUFuQixHQUF5QixZQUFVO0FBQ2hDLEtBQUk7QUFDSixPQUFLUCxNQUFMLENBQVlPLEtBQVosQ0FBa0JDLFNBQWxCO0FBQ0EsTUFBR0MsT0FBT0MsTUFBUCxDQUFjQyxHQUFkLElBQXFCLGFBQXhCLEVBQXNDO0FBQ3JDQyxXQUFRQyxHQUFSLENBQVlMLFNBQVo7QUFDQTtBQUNBLEVBTEQsQ0FLRSxPQUFNRCxLQUFOLEVBQWE7QUFDYkssVUFBUUwsS0FBUixDQUFjQSxLQUFkO0FBRUQ7QUFDSCxDQVZEO0FBV0E7Ozs7QUFJQXRCLFNBQVNxQixTQUFULENBQW1CUSxJQUFuQixHQUF3QixZQUFVO0FBQy9CLEtBQUk7QUFDSixPQUFLZCxNQUFMLENBQVljLElBQVosQ0FBaUJDLEtBQWpCLENBQXVCLEtBQUtmLE1BQTVCLEVBQW1DUSxTQUFuQztBQUNBLE1BQUdDLE9BQU9DLE1BQVAsQ0FBY0MsR0FBZCxJQUFxQixhQUF4QixFQUFzQztBQUNyQ0MsV0FBUUMsR0FBUixDQUFZTCxTQUFaO0FBQ0E7QUFDQSxFQUxELENBS0UsT0FBTUQsS0FBTixFQUFhO0FBQ2JLLFVBQVFMLEtBQVIsQ0FBY0EsS0FBZDtBQUVEO0FBQ0gsQ0FWRDtBQVdBOzs7O0FBSUF0QixTQUFTcUIsU0FBVCxDQUFtQlUsS0FBbkIsR0FBeUIsWUFBVTtBQUNoQyxLQUFJO0FBQ0osTUFBR1AsT0FBT0MsTUFBUCxDQUFjQyxHQUFkLElBQXFCLGFBQXhCLEVBQXNDO0FBQ3JDQyxXQUFRQyxHQUFSLENBQVlMLFNBQVo7QUFDQSxRQUFLUixNQUFMLENBQVlnQixLQUFaLENBQWtCUixTQUFsQjtBQUNBO0FBRUEsRUFORCxDQU1FLE9BQU1ELEtBQU4sRUFBYTtBQUNiSyxVQUFRTCxLQUFSLENBQWNBLEtBQWQ7QUFFRDtBQUNILENBWEQ7QUFZQTs7OztBQUlBdEIsU0FBU3FCLFNBQVQsQ0FBbUJXLElBQW5CLEdBQXdCLFlBQVU7QUFDL0IsS0FBSTs7QUFFSixNQUFHUixPQUFPQyxNQUFQLENBQWNDLEdBQWQsSUFBcUIsYUFBeEIsRUFBc0M7QUFDckNDLFdBQVFDLEdBQVIsQ0FBWUwsU0FBWjtBQUNBLFFBQUtSLE1BQUwsQ0FBWWlCLElBQVosQ0FBaUJULFNBQWpCO0FBQ0E7QUFDQSxFQU5ELENBTUUsT0FBTUQsS0FBTixFQUFhO0FBQ2JLLFVBQVFMLEtBQVIsQ0FBY0EsS0FBZDtBQUVEO0FBQ0gsQ0FYRCIsImZpbGUiOiJGTExvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbnZhciBsb2c0anMgPSByZXF1aXJlKCdsb2c0anMnKTtcclxudmFyIEZMTG9nZ2VyID0gZnVuY3Rpb24gKGxvZ0ZpbGVOYW1lKSB7ICBcclxuXHQvL2luaSBsb2c0anNcclxuXHRsb2c0anMuY29uZmlndXJlKHtcclxuXHRcdCAgYXBwZW5kZXJzOiB7XHJcblx0XHQgICAgZXZlcnl0aGluZzoge1xyXG5cdFx0ICAgICAgdHlwZTogJ211bHRpRmlsZScsIGJhc2U6ICdsb2dzLycsIHByb3BlcnR5OiAnZXh0JywgZXh0ZW5zaW9uOiAnLmxvZycsXHJcblx0XHQgICAgICBtYXhMb2dTaXplOiAxMDQ4NTc2MCwgYmFja3VwczogMzAwMCwgY29tcHJlc3M6IHRydWVcclxuXHRcdCAgICB9XHJcblx0XHQgIH0sXHJcblx0XHQgIGNhdGVnb3JpZXM6IHtcclxuXHRcdCAgICBkZWZhdWx0OiB7IGFwcGVuZGVyczogWyAnZXZlcnl0aGluZycgXSwgbGV2ZWw6ICdpbmZvJ31cclxuXHRcdCAgfVxyXG5cdFx0fSk7XHJcblx0dGhpcy5sb2dnZXIgPSBsb2c0anMuZ2V0TG9nZ2VyKGxvZ0ZpbGVOYW1lKTtcclxuXHR0aGlzLmxvZ2dlci5hZGRDb250ZXh0KCdleHQnLCBsb2dGaWxlTmFtZSk7IFxyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gRkxMb2dnZXI7XHJcblxyXG5GTExvZ2dlci5nZXRMb2dnZXI9ZnVuY3Rpb24oZmlsZUxvZ05hbWUpe1xyXG5cdHJldHVybiBuZXcgRkxMb2dnZXIoZmlsZUxvZ05hbWUpO1xyXG59O1xyXG4vKipcclxuICogd3JpdGUgZXJyb3IgbG9nXHJcbiAqIEBwYXJhbSBlcnJcclxuICovXHJcbkZMTG9nZ2VyLnByb3RvdHlwZS5lcnJvcj1mdW5jdGlvbigpe1xyXG5cdCAgdHJ5IHtcclxuXHRcdFx0dGhpcy5sb2dnZXIuZXJyb3IoYXJndW1lbnRzKTtcclxuXHRcdFx0aWYoY29uZmlnLnNlcnZlci5lbnYgPT0gXCJkZXZlbG9wbWVudFwiKXtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhhcmd1bWVudHMpO1xyXG5cdFx0XHR9XHJcblx0ICB9IGNhdGNoKGVycm9yKSB7XHJcblx0ICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG5cdCAgICBcclxuXHQgIH1cclxufVxyXG4vKipcclxuICogd3JpdGUgaW5mbyBsb2dcclxuICogQHBhcmFtIGluZm9cclxuICovXHJcbkZMTG9nZ2VyLnByb3RvdHlwZS5pbmZvPWZ1bmN0aW9uKCl7XHJcblx0ICB0cnkge1xyXG5cdFx0XHR0aGlzLmxvZ2dlci5pbmZvLmFwcGx5KHRoaXMubG9nZ2VyLGFyZ3VtZW50cyk7XHJcblx0XHRcdGlmKGNvbmZpZy5zZXJ2ZXIuZW52ID09IFwiZGV2ZWxvcG1lbnRcIil7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coYXJndW1lbnRzKTtcclxuXHRcdFx0fVxyXG5cdCAgfSBjYXRjaChlcnJvcikge1xyXG5cdCAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuXHQgICAgXHJcblx0ICB9XHJcbn1cclxuLyoqXHJcbiAqIHdyaXRlIGRlYnVnIGxvZ1xyXG4gKiBAcGFyYW0gZGVidWdcclxuICovXHJcbkZMTG9nZ2VyLnByb3RvdHlwZS5kZWJ1Zz1mdW5jdGlvbigpe1xyXG5cdCAgdHJ5IHtcclxuXHRcdFx0aWYoY29uZmlnLnNlcnZlci5lbnYgPT0gXCJkZXZlbG9wbWVudFwiKXtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhhcmd1bWVudHMpO1xyXG5cdFx0XHRcdHRoaXMubG9nZ2VyLmRlYnVnKGFyZ3VtZW50cyk7XHJcblx0XHRcdH1cclxuXHRcdFxyXG5cdCAgfSBjYXRjaChlcnJvcikge1xyXG5cdCAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuXHQgICAgXHJcblx0ICB9XHJcbn1cclxuLyoqXHJcbiAqIHdyaXRlIHdhcm4gbG9nXHJcbiAqIEBwYXJhbSB3YXJuXHJcbiAqL1xyXG5GTExvZ2dlci5wcm90b3R5cGUud2Fybj1mdW5jdGlvbigpe1xyXG5cdCAgdHJ5IHtcclxuXHRcdFx0XHJcblx0XHRcdGlmKGNvbmZpZy5zZXJ2ZXIuZW52ID09IFwiZGV2ZWxvcG1lbnRcIil7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coYXJndW1lbnRzKTtcclxuXHRcdFx0XHR0aGlzLmxvZ2dlci53YXJuKGFyZ3VtZW50cyk7XHJcblx0XHRcdH1cclxuXHQgIH0gY2F0Y2goZXJyb3IpIHtcclxuXHQgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcblx0ICAgIFxyXG5cdCAgfVxyXG59XHJcblxyXG4iXX0=