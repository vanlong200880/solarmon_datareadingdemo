/**
 * A group of three numbers, a component in the input number to read
 */
export default class Numbers {
    protected first: string;
    protected second: string;
    protected last: string;
    constructor(s: string);
    /**
     * If the current {@link Numbers} is the first and before a {@link Billion} number, "nghìn" will be suffixed.
     * @param s the current string of the {@link Numbers}
     * @param firstNumber indicate that this is the first {@link Numbers}
     * @param beforeBillion indicate that this {@link Numbers} is before a {@link Billion} number
     * @return the string after suffixing "nghìn"
     */
    private static suffixFirstAndBeforeBillion;
    /**
     * Read three digits of {@link Numbers}
     * @param firstNumber indicate that this is the first {@link Numbers} or not
     * @param beforeBillion indicate that this group number stands before a {@link Billion} group or not
     * @return the number in string in Vietnamese way
     */
    read(firstNumber?: boolean, beforeBillion?: boolean): string;
    /**
     * Indicate that whether the last two digits ({@link second) and {@link last}} of the {@link Numbers} are zero or not
     */
    private isLastTwoZero;
    /**
     * Indicate that whether all three digits of the {@link Numbers} are zero or not
     */
    private isThreeZero;
    /**
     * Read the first number of three digits of the {@link Numbers}
     * @param s the input number in string after read second number
     * @return the result after adding last number
     */
    private readLastNumber;
    /**
     * Read the last number when second number is existed
     * @param s the number to read
     * @return the last number in string
     */
    private readLastAfterSecond;
    /**
     * Read the second number of three digits of the {@link Numbers}
     * @param s the input number in string after read first number
     * @return the result after adding second number
     */
    private readSecondNumber;
    /**
     * Read the last number of three digits of the {@link Numbers}
     * @param s the input number in string
     * @return the result after adding first number
     */
    private readFirstNumber;
}
